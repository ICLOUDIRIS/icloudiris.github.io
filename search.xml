<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>步融雪</title>
    <url>/2020/03/05/%E6%AD%A5%E8%9E%8D%E9%9B%AA/</url>
    <content><![CDATA[<h3 id="步融雪"><a href="#步融雪" class="headerlink" title="步融雪"></a>步融雪</h3><p>下雪了，<br><br>其实是昨天的事。</p>
<p>雪很妙，<br><br>不多不少，<br><br>融在我的步子里，<br><br>还有簌簌的雪落下来，<br><br>脚边的融雪在流动，<br><br>闪闪的<br><br> 闪闪的<br><br>使我想起一篇童话<br><br>那是没有脚才能走到的地方 。<br><br>没有脚么？…. <br><br>我在草地上造大大的脚印，<br><br>假设我身边有个大怪物，<br><br>正陪我散步。</p>
<p>写于 (2012-12-30 23:15:03) </p>
]]></content>
      <categories>
        <category>poem</category>
      </categories>
      <tags>
        <tag>诗</tag>
      </tags>
  </entry>
  <entry>
    <title>超级详细的在浏览器输入 URL 回车之后发生了什么</title>
    <url>/2020/02/19/%E8%B6%85%E7%BA%A7%E8%AF%A6%E7%BB%86%E7%9A%84%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5-URL-%E5%9B%9E%E8%BD%A6%E4%B9%8B%E5%90%8E%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这个问题已经是老生常谈了，更是经常被作为面试的压轴题出现，网上也有很多文章，但最近闲的无聊，然后就自己做了一篇笔记，感觉比之前理解更透彻了。</p>
<p>这篇笔记是我这两天看了数十篇文章总结出来的，所以相对全面一点，但由于我是做前端的，所以会比较重点分析浏览器渲染页面那一部分，至于其他部分我会罗列出关键词，感兴趣的可以自行查阅，</p>
<p>注意：<strong>本文的步骤是建立在，请求的是一个简单的 HTTP 请求，没有 HTTPS、HTTP2、最简单的 DNS、没有代理、并且服务器没有任何问题的基础上，尽管这是不切实际的。</strong></p>
<h4 id="大致流程"><a href="#大致流程" class="headerlink" title="大致流程"></a>大致流程</h4><p>URL 解析<br>DNS 查询<br>TCP 连接<br>处理请求<br>接受响应<br>渲染页面</p>
<h3 id="一、URL-解析"><a href="#一、URL-解析" class="headerlink" title="一、URL 解析"></a>一、URL 解析</h3><p>地址解析：</p>
<p>首先判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行自动完成、字符编码等操作。</p>
<p>HSTS<br><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822181538.png" alt="HSTS"></p>
<p>由于安全隐患，会使用 HSTS 强制客户端使用 HTTPS 访问页面。详见：你所不知道的 HSTS。</p>
<p>其他操作</p>
<p>浏览器还会进行一些额外的操作，比如安全检查、访问限制（之前国产浏览器限制 996.icu）。</p>
<p>检查缓存</p>
<h3 id="二、DNS-查询"><a href="#二、DNS-查询" class="headerlink" title="二、DNS 查询"></a>二、DNS 查询</h3><p>基本步骤<br><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822181732.png" alt="DNS查询基本步骤"></p>
<ol>
<li>浏览器缓存</li>
</ol>
<p>浏览器会先检查是否在缓存中，没有则调用系统库函数进行查询。</p>
<ol start="2">
<li>操作系统缓存</li>
</ol>
<p>操作系统也有自己的 DNS缓存，但在这之前，会向检查域名是否存在本地的 Hosts 文件里，没有则向 DNS 服务器发送查询请求。</p>
<ol start="3">
<li>路由器缓存</li>
</ol>
<p>路由器也有自己的缓存。</p>
<ol start="4">
<li>ISP DNS 缓存</li>
</ol>
<p>ISP DNS 就是在客户端电脑上设置的首选 DNS 服务器，它们在大多数情况下都会有缓存。</p>
<p>根域名服务器查询</p>
<p>在前面所有步骤没有缓存的情况下，本地 DNS 服务器会将请求转发到互联网上的根域，下面这个图很好的诠释了整个流程：<br><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/1604181361-5a1397cca5644_articlex.png" alt="根域名服务器  来源：维基百科"></p>
<p>需要注意的点</p>
<p>递归方式：一路查下去中间不返回，得到最终结果才返回信息（浏览器到本地DNS服务器的过程）<br>迭代方式，就是本地DNS服务器到根域名服务器查询的方式。<br>什么是 DNS 劫持<br>前端 dns-prefetch 优化</p>
<h3 id="三、TCP-连接"><a href="#三、TCP-连接" class="headerlink" title="三、TCP 连接"></a>三、TCP 连接</h3><p>TCP/IP 分为四层，在发送数据时，每层都要对数据进行封装：<br><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822182400.png" alt="根域名服务器  来源：维基百科"></p>
<h4 id="1-应用层：发送-HTTP-请求"><a href="#1-应用层：发送-HTTP-请求" class="headerlink" title="1. 应用层：发送 HTTP 请求"></a>1. 应用层：发送 HTTP 请求</h4><p>在前面的步骤我们已经得到服务器的 IP 地址，浏览器会开始构造一个 HTTP 报文，其中包括：</p>
<p>请求报头（Request Header）：请求方法、目标地址、遵循的协议等等<br>请求主体（其他参数）<br>其中需要注意的点：</p>
<p>浏览器只能发送 GET、POST 方法，而打开网页使用的是 GET 方法</p>
<h4 id="2-传输层：TCP-传输报文"><a href="#2-传输层：TCP-传输报文" class="headerlink" title="2. 传输层：TCP 传输报文"></a>2. 传输层：TCP 传输报文</h4><p>传输层会发起一条到达服务器的 TCP 连接，为了方便传输，会对数据进行分割（以报文段为单位），并标记编号，方便服务器接受时能够准确地还原报文信息。</p>
<p>在建立连接前，会先进行 TCP 三次握手。</p>
<p>关于 TCP/IP 三次握手，网上已经有很多段子和图片生动地描述了。</p>
<p>相关知识点：</p>
<p>SYN 泛洪攻击</p>
<h4 id="3-网络层：IP协议查询Mac地址"><a href="#3-网络层：IP协议查询Mac地址" class="headerlink" title="3. 网络层：IP协议查询Mac地址"></a>3. 网络层：IP协议查询Mac地址</h4><p>将数据段打包，并加入源及目标的IP地址，并且负责寻找传输路线。</p>
<p>判断目标地址是否与当前地址处于同一网络中，是的话直接根据 Mac 地址发送，否则使用路由表查找下一跳地址，以及使用 ARP 协议查询它的 Mac 地址。</p>
<p>注意：在 OSI 参考模型中 ARP 协议位于链路层，但在 TCP/IP 中，它位于网络层。</p>
<h4 id="4-链路层：以太网协议"><a href="#4-链路层：以太网协议" class="headerlink" title="4. 链路层：以太网协议"></a>4. 链路层：以太网协议</h4><p>以太网协议</p>
<p>根据以太网协议将数据分为以“帧”为单位的数据包，每一帧分为两个部分：</p>
<p>标头：数据包的发送者、接受者、数据类型<br>数据：数据包具体内容<br>Mac 地址</p>
<p>以太网规定了连入网络的所有设备都必须具备“网卡”接口，数据包都是从一块网卡传递到另一块网卡，网卡的地址就是 Mac 地址。每一个 Mac 地址都是独一无二的，具备了一对一的能力。</p>
<p>广播</p>
<p>发送数据的方法很原始，直接把数据通过 ARP 协议，向本网络的所有机器发送，接收方根据标头信息与自身 Mac 地址比较，一致就接受，否则丢弃。</p>
<p>注意：接收方回应是单播。</p>
<p>相关知识点：</p>
<p>ARP 攻击<br>服务器接受请求<br>接受过程就是把以上步骤逆转过来，参见上图。</p>
<p>四、服务器处理请求<br>大致流程<br><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822183251.png" alt="服务器处理请求 大致流程 "></p>
<p>HTTPD</p>
<p>最常见的 HTTPD 有 Linux 上常用的 Apache 和 Nginx，以及 Windows 上的 IIS。</p>
<p>它会监听得到的请求，然后开启一个子进程去处理这个请求。</p>
<p>处理请求</p>
<p>接受 TCP 报文后，会对连接进行处理，对HTTP协议进行解析（请求方法、域名、路径等），并且进行一些验证：</p>
<p>验证是否配置虚拟主机<br>验证虚拟主机是否接受此方法<br>验证该用户可以使用该方法（根据 IP 地址、身份信息等）<br>重定向</p>
<p>假如服务器配置了 HTTP 重定向，就会返回一个 301永久重定向响应，浏览器就会根据响应，重新发送 HTTP 请求（重新执行上面的过程）。</p>
<p>关于更多：详见这篇文章</p>
<p>URL 重写</p>
<p>然后会查看 URL 重写规则，如果请求的文件是真实存在的，比如图片、html、css、js文件等，则会直接把这个文件返回。</p>
<p>否则服务器会按照规则把请求重写到 一个 REST 风格的 URL 上。</p>
<p>然后根据动态语言的脚本，来决定调用什么类型的动态文件解释器来处理这个请求。</p>
<p>以 PHP 语言的 MVC 框架举例，它首先会初始化一些环境的参数，根据 URL 由上到下地去匹配路由，然后让路由所定义的方法去处理请求。</p>
<h3 id="五、浏览器接受响应"><a href="#五、浏览器接受响应" class="headerlink" title="五、浏览器接受响应"></a>五、浏览器接受响应</h3><p>浏览器接收到来自服务器的响应资源后，会对资源进行分析。</p>
<p>首先查看 Response header，根据不同状态码做不同的事（比如上面提到的重定向）。</p>
<p>如果响应资源进行了压缩（比如 gzip），还需要进行解压。</p>
<p>然后，对响应资源做缓存。</p>
<p>接下来，根据响应资源里的 MIME 类型去解析响应内容（比如 HTML、Image各有不同的解析方式）。</p>
<h3 id="六、渲染页面"><a href="#六、渲染页面" class="headerlink" title="六、渲染页面"></a>六、渲染页面</h3><p>浏览器内核<br><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/961f7b5d-9e06-4006-ab99-974e8e9e2ba5.png" alt="浏览器内核"></p>
<p>不同的浏览器内核，渲染过程也不完全相同，但大致流程都差不多。</p>
<p>基本流程<br><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822183712.png" alt="基本流程"></p>
<h4 id="1-HTML-解析"><a href="#1-HTML-解析" class="headerlink" title="1.HTML 解析"></a>1.HTML 解析</h4><p>首先要知道浏览器解析是从上往下一行一行地解析的。</p>
<p>解析的过程可以分为四个步骤：</p>
<ol>
<li>解码（encoding）</li>
</ol>
<p>传输回来的其实都是一些二进制字节数据，浏览器需要根据文件指定编码（例如UTF-8）转换成字符串，也就是HTML 代码。</p>
<ol start="2">
<li>预解析（pre-parsing）</li>
</ol>
<p>预解析做的事情是提前加载资源，减少处理时间，它会识别一些会请求资源的属性，比如img标签的src属性，并将这个请求加到请求队列中。</p>
<ol start="3">
<li>符号化（Tokenization）</li>
</ol>
<p>符号化是词法分析的过程，将输入解析成符号，HTML 符号包括，开始标签、结束标签、属性名和属性值。</p>
<p>它通过一个状态机去识别符号的状态，比如遇到&lt;，&gt;状态都会产生变化。</p>
<ol start="4">
<li>构建树（tree construction）</li>
</ol>
<p>注意：符号化和构建树是并行操作的，也就是说只要解析到一个开始标签，就会创建一个 DOM 节点。</p>
<p>在上一步符号化中，解析器获得这些标记，然后以合适的方法创建DOM对象并把这些符号插入到DOM对象中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Web page parsing&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;Web page parsing&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;This is an example Web page.&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/1355879024-573db51949951_articlex.png" alt="dom 结构"></p>
<p>浏览器容错进制</p>
<p>你从来没有在浏览器看过类似”语法无效”的错误，这是因为浏览器去纠正错误的语法，然后继续工作。</p>
<p>事件</p>
<p>当整个解析的过程完成以后，浏览器会通过DOMContentLoaded事件来通知DOM解析完成。</p>
<h4 id="2-CSS-解析"><a href="#2-CSS-解析" class="headerlink" title="2. CSS 解析"></a>2. CSS 解析</h4><p>一旦浏览器下载了 CSS，CSS 解析器就会处理它遇到的任何 CSS，根据语法规范解析出所有的 CSS 并进行标记化，然后我们得到一个规则表。</p>
<p>CSS 匹配规则</p>
<p>在匹配一个节点对应的 CSS 规则时，是按照从右到左的顺序的，例如：div p { font-size :14px }会先寻找所有的p标签然后判断它的父元素是否为div。</p>
<p>所以我们写 CSS 时，尽量用 id 和 class，千万不要过度层叠。</p>
<h4 id="3-渲染树"><a href="#3-渲染树" class="headerlink" title="3. 渲染树"></a>3. 渲染树</h4><p>其实这就是一个 DOM 树和 CSS 规则树合并的过程。</p>
<p>注意：渲染树会忽略那些不需要渲染的节点，比如设置了display:none的节点。</p>
<p>计算</p>
<p>通过计算让任何尺寸值都减少到三个可能之一：auto、百分比、px，比如把rem转化为px。</p>
<p>级联</p>
<p>浏览器需要一种方法来确定哪些样式才真正需要应用到对应元素，所以它使用一个叫做specificity的公式，这个公式会通过：</p>
<p>标签名、class、id<br>是否内联样式<br>!important<br>然后得出一个权重值，取最高的那个。</p>
<p>渲染阻塞</p>
<p>当遇到一个script标签时，DOM 构建会被暂停，直至脚本完成执行，然后继续构建 DOM 树。</p>
<p>但如果 JS 依赖 CSS 样式，而它还没有被下载和构建时，浏览器就会延迟脚本执行，直至 CSS Rules 被构建。</p>
<p>所有我们知道：</p>
<p>CSS 会阻塞 JS 执行<br>JS 会阻塞后面的 DOM 解析<br>为了避免这种情况，应该以下原则：</p>
<p>CSS 资源排在 JavaScript 资源前面<br>JS 放在 HTML 最底部，也就是 <script src="/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05"></script><script>L2Dwidget.init({"model":{"scale":1.5,"hHeadPos":0.5,"vHeadPos":0.618,"jsonPath":"/live2dw/assets/ni-j.model.json"},"display":{"superSample":2,"width":120,"height":200,"position":"left // 模型在网页显示位置","hOffset":20,"vOffset":40},"mobile":{"show":false,"scale":0.5},"react":{"opacityDefault":0.7,"opacityOnHover":0.2},"symbols_count_time":null,"symbols":true,"time":true,"total_symbols":true,"total_time":true,"log":false,"pluginJsPath":"lib/","pluginModelPath":"assets/","pluginRootPath":"live2dw/","tagMode":false});</script>前<br>另外，如果要改变阻塞模式，可以使用 defer 与 async，详见：这篇文章</p>
<h4 id="4-布局与绘制"><a href="#4-布局与绘制" class="headerlink" title="4. 布局与绘制"></a>4. 布局与绘制</h4><p>确定渲染树种所有节点的几何属性，比如：位置、大小等等，最后输入一个盒子模型，它能精准地捕获到每个元素在屏幕内的准确位置与大小。</p>
<p>然后遍历渲染树，调用渲染器的 paint() 方法在屏幕上显示其内容。</p>
<h4 id="5-合并渲染层"><a href="#5-合并渲染层" class="headerlink" title="5. 合并渲染层"></a>5. 合并渲染层</h4><p>把以上绘制的所有图片合并，最终输出一张图片。</p>
<h4 id="6-回流与重绘"><a href="#6-回流与重绘" class="headerlink" title="6. 回流与重绘"></a>6. 回流与重绘</h4><p>回流(reflow)</p>
<p>当浏览器发现某个部分发现变化影响了布局时，需要倒回去重新渲染，会从html标签开始递归往下，重新计算位置和大小。</p>
<p>reflow基本是无法避免的，因为当你滑动一下鼠标、resize 窗口，页面就会产生变化。</p>
<p>重绘(repaint)</p>
<p>改变了某个元素的背景色、文字颜色等等不会影响周围元素的位置变化时，就会发生重绘。</p>
<p>每次重绘后，浏览器还需要合并渲染层并输出到屏幕上。</p>
<p>回流的成本要比重绘高很多，所以我们应该尽量避免产生回流。</p>
<p>比如：</p>
<p>display:none 会触发回流，而 visibility:hidden 只会触发重绘。</p>
<h4 id="7-JavaScript-编译执行"><a href="#7-JavaScript-编译执行" class="headerlink" title="7. JavaScript 编译执行"></a>7. JavaScript 编译执行</h4><p>大致流程</p>
<p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822184523.png" alt="js编译执行大致流程"></p>
<p>可以分为三个阶段：</p>
<h5 id="1-词法分析"><a href="#1-词法分析" class="headerlink" title="1. 词法分析"></a>1. 词法分析</h5><p>JS 脚本加载完毕后，会首先进入语法分析阶段，它首先会分析代码块的语法是否正确，不正确则抛出“语法错误”，停止执行。</p>
<p>几个步骤：</p>
<p>分词，例如将var a = 2，，分成var、a、=、2这样的词法单元。<br>解析，将词法单元转换成抽象语法树（AST）。<br>代码生成，将抽象语法树转换成机器指令。</p>
<h5 id="2-预编译"><a href="#2-预编译" class="headerlink" title="2. 预编译"></a>2. 预编译</h5><p>JS 有三种运行环境：</p>
<p>全局环境<br>函数环境<br>eval<br>每进入一个不同的运行环境都会创建一个对应的执行上下文，根据不同的上下文环境，形成一个函数调用栈，栈底永远是全局执行上下文，栈顶则永远是当前执行上下文。</p>
<p>创建执行上下文</p>
<p>创建执行上下文的过程中，主要做了以下三件事：</p>
<p>创建变量对象<br>参数、函数、变量<br>建立作用域链<br>确认当前执行环境是否能访问变量<br>确定 This 指向</p>
<h5 id="3-执行"><a href="#3-执行" class="headerlink" title="3. 执行"></a>3. 执行</h5><p>JS 线程<br><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822184731.png" alt="js线程"></p>
<p>虽然 JS 是单线程的，但实际上参与工作的线程一共有四个：</p>
<p>其中三个只是协助，只有 JS 引擎线程是真正执行的</p>
<p>JS 引擎线程：也叫 JS 内核，负责解析执行 JS 脚本程序的主线程，例如 V8 引擎<br>事件触发线程：属于浏览器内核线程，主要用于控制事件，例如鼠标、键盘等，当事件被触发时，就会把事件的处理函数推进事件队列，等待 JS 引擎线程执行<br>定时器触发线程：主要控制setInterval和setTimeout，用来计时，计时完毕后，则把定时器的处理函数推进事件队列中，等待 JS 引擎线程。<br>HTTP 异步请求线程：通过XMLHttpRequest连接后，通过浏览器新开的一个线程，监控readyState状态变更时，如果设置了该状态的回调函数，则将该状态的处理函数推进事件队列中，等待JS引擎线程执行。<br>注：浏览器对同一域名的并发连接数是有限的，通常为 6 个。</p>
<p>宏任务</p>
<p>分为：</p>
<p>同步任务：按照顺序执行，只有前一个任务完成后，才能执行后一个任务<br>异步任务：不直接执行，只有满足触发条件时，相关的线程将该异步任务推进任务队列中，等待JS引擎主线程上的任务执行完毕时才开始执行，例如异步Ajax、DOM事件，setTimeout等。<br>微任务</p>
<p>微任务是ES6和Node环境下的，主要 API 有：Promise，process.nextTick。</p>
<p>微任务的执行在宏任务的同步任务之后，在异步任务之前。</p>
<p><img src="https://gd4ark-1258805822.cos.ap-guangzhou.myqcloud.com/images/20190822185002.png" alt="微任务"></p>
<p>代码例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(&apos;1&apos;); // 宏任务 同步</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">    console.log(&apos;2&apos;); // 宏任务 异步</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">new Promise(function(resolve) &#123;</span><br><span class="line">    console.log(&apos;3&apos;); // 宏任务 同步</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">    console.log(&apos;4&apos;) // 微任务</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>console.log(‘5’) // 宏任务 同步<br>以上代码输出顺序为：1,3,5,4,2</p>
<p>本文转载自 <a href="https://4ark.me//post/b6c7c0a2.html" target="_blank" rel="noopener">https://4ark.me//post/b6c7c0a2.html</a></p>
]]></content>
  </entry>
  <entry>
    <title>由timerid=null和clearTimeout展開</title>
    <url>/2020/02/17/%E7%94%B1timerid-null%E5%92%8CclearTimeout%E5%B1%95%E9%96%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>防抖和节流</title>
    <url>/2020/02/13/%E9%98%B2%E6%8A%96%E5%92%8C%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<p>为了節約資源提升性能,或則避免我們可以根据实际的业务需求来选用,<br>防抖和节流有類似的地方,下面來說了一下具體的區別</p>
<h3 id="防抖是什么-应用场景"><a href="#防抖是什么-应用场景" class="headerlink" title="防抖是什么  应用场景"></a>防抖是什么  应用场景</h3><p> <strong>防抖函数（Debounce）</strong><br>  當持續觸發事件，一定時間內沒有再觸發事件，事件處理函數才會執行一次，也就是說要等一次夠時間的，達不到就不會觸發。<br>  根據上述描述，簡易代碼實現：<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  let debounce = (fn, delay) =&gt; &#123;</span><br><span class="line">    let timer = null;</span><br><span class="line">    return function (...args) &#123;</span><br><span class="line">      if (timer) &#123;</span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">      &#125;</span><br><span class="line">      timer = setTimeout(() =&gt; &#123;</span><br><span class="line">        fn(...args)</span><br><span class="line">        console.log(this);</span><br><span class="line">      &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>  防抖函数的關鍵：一个动作发生一定时间之后，才执行特定的事件。<br>  ps：使用clearTimeout清除定時器後，timer （定時器id）也要清空。</p>
<p>   <strong>应用场景</strong><br>    * 鼠标/触摸屏的mouseover/touchmove<br>    * 页面窗口的resize事件<br>    * 滚动条的scroll事件</p>
<h3 id="节流是什么-应用场景"><a href="#节流是什么-应用场景" class="headerlink" title="节流是什么  应用场景"></a>节流是什么  应用场景</h3><p>  <strong>节流函数（Debounce）</strong><br>  持續觸發事件，保證</p>
<pre><code>* API的调用
* 按钮点击事件/input事件，防止用户多次重复提交</code></pre><h3 id="如何实现的"><a href="#如何实现的" class="headerlink" title="如何实现的"></a>如何实现的</h3>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>Debounce</tag>
        <tag>Throttle</tag>
      </tags>
  </entry>
  <entry>
    <title>信息搜索能力</title>
    <url>/2020/02/05/%E4%BF%A1%E6%81%AF%E6%90%9C%E7%B4%A2%E8%83%BD%E5%8A%9B/</url>
    <content><![CDATA[<blockquote>
<p>背景：信息网络化的社会 信息素养是社会个人能力的新标配。</p>
</blockquote>
<p><strong>目的：學習技能, 强化信息能力,更好的支撐學習工作和生活,走出迷茫</strong></p>
<h4 id="首先来讲讲什么是信息"><a href="#首先来讲讲什么是信息" class="headerlink" title="首先来讲讲什么是信息"></a>首先来讲讲什么是信息</h4><pre><code>对于信息,信管专业的我在大学里学到过很多种定义,觉得最恰当的是：信息是用来消除不确定性的东西。</code></pre>]]></content>
      <categories>
        <category>信息素养</category>
      </categories>
      <tags>
        <tag>search haoyisou information</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2020/02/05/%E6%A2%A6%E9%86%92/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>铃木俊隆禅师的12生活准则</title>
    <url>/2019/11/03/%E9%93%83%E6%9C%A8%E4%BF%8A%E9%9A%86%E7%A6%85%E5%B8%88%E7%9A%8412%E7%94%9F%E6%B4%BB%E5%87%86%E5%88%99/</url>
    <content><![CDATA[<h2 id="铃木俊隆禅师的十二条生活准则"><a href="#铃木俊隆禅师的十二条生活准则" class="headerlink" title="铃木俊隆禅师的十二条生活准则"></a>铃木俊隆禅师的十二条生活准则</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1572783679482&di=0fdff946f8708c23919dc4ac4048120f&imgtype=jpg&src=http%3A%2F%2Fimg4.imgtn.bdimg.com%2Fit%2Fu%3D937199069%2C1214788643%26fm%3D214%26gp%3D0.jpg" alt="铃木俊隆">铃木俊隆禅师（1904—1971），法名祥岳俊隆，日本曹洞宗系禅僧，是将禅宗思想介绍到西方世界的重要日本僧人。生于日本神奈川县平冢市，父亲也是一位禅师。在日本期间，铃木俊隆自年少即开始禅修训练，经过多年的修习而臻成熟境界。即使在第二次世界大战期间许多禅师改行的大环境下，铃木仍坚守他的禅师生涯。1959年5月，铃木迁移至美国旧金山。几年内，他的教授吸引了许多西方学生，他在旧金山建立了禅中心，并在加州卡梅尔谷地成立了西方第一所禅修院。1971年在美国圆寂。  –摘自百度百科</p>
</blockquote>
<p>  <em>著作 :《禅者的初心》、《禅的真义》  <br>  相关著作:《弯曲的黄瓜》</em></p>
<p><strong>禅师开示说“万事总是变迁流转，所以没有你可以拥有的事物”。</strong></p>
<h3 id="十二条生活准则"><a href="#十二条生活准则" class="headerlink" title="十二条生活准则"></a>十二条生活准则</h3><h4 id="01-一次只专注于一件事情"><a href="#01-一次只专注于一件事情" class="headerlink" title="01.一次只专注于一件事情"></a>01.一次只专注于一件事情</h4><p>当你行走的时候，专心行走。</p>
<p>注意你的腿迈出去，是先左脚还是右脚 ，节奏怎么样，摆臂的幅度怎么样，有没有挺直腰背 大体目视前方。</p>
<p>当你吃饭的时候，专心吃饭，<br>吃饭不仅仅是填饱肚子，是幸福人生中很重要的一部分。<br>吃饭时细细咀嚼，能淀粉酶分解淀粉成为麦芽糖的甜味,<br>甚至能想起稻谷在田野里自由畅快的样子，还有或绿或黄的蔬菜。<br>小时候时候觉得吃饭很麻烦，尤其是洗碗，吃饭是为了填饱肚子，<br>想着要是人是动植物就好了，皮肤上都是叶绿素，可以晒晒太阳就活下去。<br>有试着在饭前做一下感恩的仪式吗？<br>如果有,首先必要感谢太阳，<br>但没有,可能也还是首先感谢太阳它老人家发光发热。<br>毕竟万物生长靠太阳。</p>
<h4 id="02-慢慢地并谨慎地做事"><a href="#02-慢慢地并谨慎地做事" class="headerlink" title="02.慢慢地并谨慎地做事"></a>02.慢慢地并谨慎地做事</h4><p>你可以一次完成一个任务，<br>但也可能会急匆匆的完成它。<br>相反，你不能急，要慢慢来。<br>心急吃不了热豆腐,<br>谨慎地注意你的行动，<br>不要太急忙和随意了。<br>这需要练习，</p>
<p>但他有助于你专注于你的任务。<br>深圳的节奏很快，我想正是因为这样快的节奏</p>
<h4 id="03-彻底地完成它"><a href="#03-彻底地完成它" class="headerlink" title="03.彻底地完成它"></a>03.彻底地完成它</h4><p>全心全意关注眼前的事情。</p>
<p>不完成目前的任务不要进行下一个。</p>
<p>如果因为某些原因你不得不去做别的事，</p>
<p>至少尽量把没有完成的放好并整理一下自己。</p>
<h4 id="04-少做"><a href="#04-少做" class="headerlink" title="04.少做"></a>04.少做</h4><p>如果你少做，</p>
<p>你就能够更专注地慢慢地、</p>
<p>更彻底地做这些事情，</p>
<p>如果你把一天用不同的任务填满，</p>
<p>你就会急忙地从一件事情到另一件事情，</p>
<p>而不会停下来去想你究竟做了些什么。</p>
<h4 id="05-在事情之间留些空间"><a href="#05-在事情之间留些空间" class="headerlink" title="05.在事情之间留些空间"></a>05.在事情之间留些空间</h4><p>跟“少做”原则相关，</p>
<p>但这是管理你的日程表保证你总是有时间来完成每项任务的一种方法。</p>
<p>不要把事情安排的过于紧密</p>
<p>——相反在事情之间留些空间出来。</p>
<p>这会让你的日程表更轻松，</p>
<p>留出空间也可以防止万一</p>
<p>一项任务花费的时间超过了你的计划。</p>
<h4 id="06培养一种仪式"><a href="#06培养一种仪式" class="headerlink" title="06培养一种仪式"></a>06培养一种仪式</h4><p>仪式给人一种重要的感觉</p>
<p>——如果事情重要到需要一种仪式，</p>
<p>就需要给予你完成</p>
<p>——你可以建立你自己的仪式，</p>
<p>为食物的准备、为吃饭、</p>
<p>为清洁、为你开始做的事情、</p>
<p>为你醒来后做的事情和你上床之前做的事情、</p>
<p>为你在锻炼之前做的事情。</p>
<p>是的，为任何你想做的事情建立一种仪式。</p>
<h4 id="07-为特定的事情分配好时间"><a href="#07-为特定的事情分配好时间" class="headerlink" title="07.为特定的事情分配好时间"></a>07.为特定的事情分配好时间</h4><p>在一天中的特定时间内是用来完成特定的活动的。洗澡的时间、工作的时间、</p>
<p>清洁的时间、吃饭的时间。</p>
<p>这可以保证这些事情有规律地完成。</p>
<p>你可以为你自己的活动分配时间，</p>
<p>不管是工作或是清洁或是锻炼或是宁静的沉思。</p>
<p>如果它很重要需要有规律地来完成，</p>
<p>那就考虑为它分配好时间吧。</p>
<h4 id="08-花些时间在打坐上"><a href="#08-花些时间在打坐上" class="headerlink" title="08.花些时间在打坐上"></a>08.花些时间在打坐上</h4><p>打坐是每天最重要的部分之一。</p>
<p>每天，有专门分配用来打坐的时间。</p>
<p>这种沉思确实是学习活在当下的练习。</p>
<p>你可以花些时间来静坐冥想，</p>
<p>或做我所做的：我以跑步做为活在当下的一种锻炼。</p>
<p>同样地，你可以采用任何活动，</p>
<p>只要你你经常地去做并练习活在当下。</p>
<h4 id="09-微笑和服务他人"><a href="#09-微笑和服务他人" class="headerlink" title="09.微笑和服务他人"></a>09.微笑和服务他人</h4><p>教会了谦逊，确保生活不单单是自私的，</p>
<p>也是为了奉献他人的。</p>
<p>如果你是一个家长，可能你已经至少在家庭中为服务别人花了些时间，</p>
<p>而不是家长的人们也许也做了这些。</p>
<p>类似地，微笑并与人为善是改善你周围人生活的一种很好的方法。</p>
<p>也可以考虑志愿参加慈善工作。</p>
<h4 id="10-把清洁和烹饪变成冥想"><a href="#10-把清洁和烹饪变成冥想" class="headerlink" title="10.把清洁和烹饪变成冥想"></a>10.把清洁和烹饪变成冥想</h4><p>除了上面提到的打坐以外，</p>
<p>清洁和烹饪也是每天最荣耀的部分。</p>
<p>他们都是练习专注力的好方式，</p>
<p>可以是每天进行的很好的仪式。</p>
<p>如果烹饪和清洁对你来说似乎烦琐的杂务，</p>
<p>试着用冥想的方式来完成它们。</p>
<p>全心全意做这些工作，</p>
<p>集中注意、慢慢地、彻底地做这些事情。</p>
<p>这会改变你的一天（同时也给你一间干净的房间）。</p>
<h4 id="11-思想什么是必须的"><a href="#11-思想什么是必须的" class="headerlink" title="11.思想什么是必须的"></a>11.思想什么是必须的</h4><p>在禅僧的生活中基本上都是必须的要做的。</p>
<p>他没有充满鞋子的衣柜或最新的时尚衣服。</p>
<p>他没有冰箱和橱柜来存放垃圾食物。</p>
<p>他没有最新的小玩意、汽车、电视或苹果音乐播放器。</p>
<p>他有保暖的衣物、有避雨的房屋、必须的器具、</p>
<p>不可少的工具和充饥的食物（他们吃的很简单，</p>
<p>素餐通常有大米、味噌汤、蔬菜和泡菜组成）。</p>
<p>现在，我的意思不是说你应该完成像禅僧一样生活——我也没有这样做。</p>
<p>但这确实提醒我们在我们的生活中有很多事情是没有必要的。</p>
<p>思考我们真正需要的是什么，</p>
<p>考虑拥那些不必要的东西是否对我们真的重要，</p>
<p>这对我们是有用的。</p>
<h4 id="12-简单生活"><a href="#12-简单生活" class="headerlink" title="12.简单生活"></a>12.简单生活</h4><p>简单生活就是尽可能地处理掉那些没有必要的和不重要的东西，</p>
<p>为重要的东西留存空间。</p>
<p>而什么是重要的是因人而异的。</p>
<p>没有什么定律来规定对你来说什么应该重要的——但你应该考虑什么是你生命中最为重要的，</p>
<p>通过去除不是那么重要的事情，</p>
<p>为你生命中重要的事情留出空间来。</p>
<p>– 看了《冬吴》来记录一下</p>
]]></content>
      <categories>
        <category>杂谈随笔</category>
      </categories>
      <tags>
        <tag>铃木俊隆 禅</tag>
      </tags>
  </entry>
  <entry>
    <title>git使用ssh更新代碼</title>
    <url>/2019/11/01/ssh/</url>
    <content><![CDATA[<h2 id="git使用ssh更新代碼的好處"><a href="#git使用ssh更新代碼的好處" class="headerlink" title="git使用ssh更新代碼的好處"></a>git使用ssh更新代碼的好處</h2><p>  git使用https协议，每次pull,push都要输入密码，使用git协议，使用ssh秘钥，可以省去每次输密码</p>
<h2 id="原理-ssh原理"><a href="#原理-ssh原理" class="headerlink" title="原理 ssh原理"></a>原理 ssh原理</h2><h2 id="前提準備工作"><a href="#前提準備工作" class="headerlink" title="前提準備工作"></a>前提準備工作</h2><pre><code>已經安裝好git</code></pre><h2 id="具體操作流程-分爲以下3大步驟"><a href="#具體操作流程-分爲以下3大步驟" class="headerlink" title="具體操作流程 分爲以下3大步驟"></a>具體操作流程 分爲以下3大步驟</h2><h3 id="生成ssh-公私鑰匙"><a href="#生成ssh-公私鑰匙" class="headerlink" title="生成ssh 公私鑰匙"></a>生成ssh 公私鑰匙</h3><pre><code>一、本地生成密钥对;</code></pre><h3 id="填入到git上"><a href="#填入到git上" class="headerlink" title="填入到git上"></a>填入到git上</h3><pre><code>二、设置github上的公钥;
三、修改git的remote url为git协议。</code></pre><h3 id="上傳的運行的命令"><a href="#上傳的運行的命令" class="headerlink" title="上傳的運行的命令"></a>上傳的運行的命令</h3><h2 id="ssh-agent"><a href="#ssh-agent" class="headerlink" title="ssh-agent"></a>ssh-agent</h2><pre><code>使用多個ssh的情況,代理ssh-agent</code></pre>]]></content>
  </entry>
  <entry>
    <title>常用markdown语法</title>
    <url>/2019/10/16/%E5%B8%B8%E7%94%A8markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>前言<br>常用的markd语法记录 ，其实就是自己的工具书。</p>
<ul>
<li><p>标题  （以下三种可以混合使用）</p>
<ul>
<li><p>方式一</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></li>
<li><p>方式二  </p>
<p>一级标题<br>=<br>一级标题<br>-</p>
</li>
<li><p>方式三  （同方式一 还多写 # 感觉有点蠢 不知到什么时候会用上）</p>
<h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="一级标题-2"><a href="#一级标题-2" class="headerlink" title="一级标题"></a>一级标题</h2></li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>列表</p>
<ul>
<li><p>无序列表</p>
<ul>
<li>香蕉</li>
<li>苹果</li>
<li>椰子</li>
<li>梨</li>
</ul>
</li>
<li><p>有序列表 （数值带英文点就行 能自动排序识别）</p>
<ol>
<li>列表1</li>
<li>列表2</li>
<li>列表3</li>
<li>d</li>
</ol>
</li>
</ul>
<hr>
</li>
<li><p>区块引用 （引用作为一个容器 里面放什么都行 比如说:标题）</p>
<ul>
<li>追求快乐、幸福、自由，这些都不是足够正确的人生态度，生活中总有你觉得不快乐、不幸福、不自由的时刻，<br>如果要追求，那么我想 应该想要成为好一点的自己。<blockquote>
<p>这是我说的        –by icloudiris</p>
</blockquote>
</li>
<li>两种方法<blockquote>
<p>方法一 为了展示方便 简写了某些地方的表达式</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<p>还可以多级引用  好像可以无线添加下去</p>
<blockquote>
<p>一级引用</p>
<blockquote>
<p>二级引用</p>
<blockquote>
<blockquote>
<p>三级引用</p>
<blockquote>
<blockquote>
<p>三级引用</p>
<blockquote>
<p>三级引用</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<hr>
<ul>
<li>风格线  （传说是华丽丽的 但简单朴素）<br>符号分别为 * - _（星号，减号，底线） 少说得三个 </li>
</ul>
<ol>
<li><hr>
</li>
<li><hr>
</li>
<li><hr>
</li>
</ol>
<ul>
<li>链接  （待补充完整）<ul>
<li>下记两种方式<br>空格+后面引号里的参数为title属性 可以省略<br>公式：[name]: <a href="http://icloudiris.top/about" target="_blank" rel="noopener">http://icloudiris.top/about</a> “关于”</li>
</ul>
</li>
</ul>
<pre><code>* [我是链接](http://icloudiris.top)blog 地址</code></pre><hr>
<ul>
<li><p>图片 （对这种写法有疑惑的点 ）</p>
<p>  <img src="http://icloudiris.top/images/avatarWordArt.png" alt="我是WordArt"></p>
</li>
</ul>
<hr>
<ul>
<li><p>代码框<br>看实际情况 使用  如果单行或者少量代码 那么 使用反单引号</p>
<h4 id="第一种-单行用"><a href="#第一种-单行用" class="headerlink" title="第一种 单行用``"></a>第一种 单行用``</h4><p><code>&lt;div class= &quot;box&quot;&gt; hola &lt;div&gt; // zheshia</code></p>
<h4 id="第二种-单行用"><a href="#第二种-单行用" class="headerlink" title="第二种 单行用"></a>第二种 单行用<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></h4><div class="box"> hola <div>
<div class="box"> hola <div>
<div class="box"> hola <div>
```</div></div></div></div></div></div></li>
<li><p>简易表格</p>
<ul>
<li><p>总结是每个单元都要隔开 表头要加横线隔开  单元和线之间有没有空格不影响 如果 表头字是竖着显示的 可以填充表格</p>
<table>
<thead>
<tr>
<th>铅笔</th>
<th>签字笔</th>
<th>水彩笔</th>
<th>钢笔</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td>2</td>
<td>1就看见了尽解开了解开了快了解</td>
<td>1只钢笔知道是哪里来的</td>
</tr>
</tbody></table>
</li>
</ul>
<hr>
</li>
<li><p>强调</p>
<ul>
<li><p>外面是两只星星*/_  没有空格 </p>
<p><em>我什么也不知道，我只是一只斜塔</em>  </p>
<p><em>我也只是一只斜塔，我也什么都不知道</em> </p>
</li>
</ul>
<hr>
</li>
<li><p>加粗  </p>
<ul>
<li><p>外面的星星<em>/_  加倍的话   *</em>字体加粗**  同样中间没有空格  </p>
<p><strong>我什么也不知道，我只是一只斜塔</strong> </p>
<p><strong>我也只是一只斜塔，我也什么都不知道</strong> </p>
</li>
</ul>
<hr>
</li>
<li><p>转义  </p>
<ul>
<li>有些符号有多个意思 用这个转义就是元本长什么样就什么样子</li>
<li>\</li>
<li>*</li>
<li>_</li>
<li>+</li>
<li>!</li>
</ul>
<hr>
</li>
<li><p>删除线</p>
<p><del>来呀 拿起笔 动手啊</del></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>一键部署代码到github与coding </title>
    <url>/2019/10/16/%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2%E4%BB%A3%E7%A0%81%E5%88%B0github%E4%B8%8Ecoding/</url>
    <content><![CDATA[<ul>
<li>目的</li>
</ul>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>常用git命令</title>
    <url>/2019/10/16/%E5%B8%B8%E7%94%A8git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="版本控制工具"><a href="#版本控制工具" class="headerlink" title="版本控制工具"></a>版本控制工具</h2><h3 id="源代码管理工具-版本控制-的好处"><a href="#源代码管理工具-版本控制-的好处" class="headerlink" title="源代码管理工具(版本控制)的好处"></a>源代码管理工具(版本控制)的好处</h3><p>a、利于团队开发/多人协同开发</p>
<p>b、对于个人开发<br>    –&gt;对某个功能的修改操作</p>
<h3 id="版本控制工具的种类："><a href="#版本控制工具的种类：" class="headerlink" title="版本控制工具的种类："></a>版本控制工具的种类：</h3><ul>
<li>git(github)</li>
<li>svn</li>
<li>java：maven</li>
<li>.net：vss tfs</li>
</ul>
<h3 id="源代码管理工具按照功能划分："><a href="#源代码管理工具按照功能划分：" class="headerlink" title="源代码管理工具按照功能划分："></a>源代码管理工具按照功能划分：</h3><p>a、本地代码管理        –&gt;用于个人开发           –&gt;被淘汰<br>b、集中式源代码管理工具(svn)<br>c、分布式。。。。。。。(git)       –&gt;兼具了a+b的功能</p>
<h2 id="Git的使用"><a href="#Git的使用" class="headerlink" title="Git的使用"></a>Git的使用</h2><h3 id="通过git-init将当前文件夹进行初始化"><a href="#通过git-init将当前文件夹进行初始化" class="headerlink" title="通过git init将当前文件夹进行初始化"></a>通过git init将当前文件夹进行初始化</h3><pre><code>--&gt;一定要明确你要将哪个文件夹被git管理起来</code></pre><h3 id="git-status可以查看仓库中的文件状态"><a href="#git-status可以查看仓库中的文件状态" class="headerlink" title="git status可以查看仓库中的文件状态"></a>git status可以查看仓库中的文件状态</h3><ul>
<li><p>在往git仓库中添加文件的时候，这些刚添加的文件，状态是：未追踪(Untracked)</p>
</li>
<li><p>对于已经进入过暂存区的文件，文件的状态是：changes to be committed</p>
</li>
<li><p>对于已经进入过暂存区的文件，再次修改文件，文件的状态是：modified</p>
</li>
<li><p>ps：如果当前文件夹下面的某个文件夹是空的，不会显示在结果中</p>
</li>
</ul>
<h3 id="git-add-文件名–-gt-将指定的文件放到暂存区"><a href="#git-add-文件名–-gt-将指定的文件放到暂存区" class="headerlink" title="git add 文件名–&gt;将指定的文件放到暂存区"></a>git add 文件名–&gt;将指定的文件放到暂存区</h3><p>把文件放到暂存区之后，状态是：待提交(changes to be committed)</p>
<p>git add 指定目录–&gt;将指定目录下面的文件放到暂存区<br>    –&gt;ps：如果当前仓库的根目录（.git文件夹位于的目录） git add .将仓库下面的没有被提交到暂存区的代码放到暂存区</p>
<p>git add *   –&gt;将当前仓库中的所有的没有被提交到暂存区的代码放到暂存区</p>
<p>–&gt;git add命令不仅仅可以将新添加的文件放到暂存区，也可以将已修改的文件放到暂存区</p>
<h3 id="关于用户名和邮箱的配置"><a href="#关于用户名和邮箱的配置" class="headerlink" title="关于用户名和邮箱的配置"></a>关于用户名和邮箱的配置</h3><p>–&gt;如果从来没有过，在提交到本地主仓库之前不会有任何问题，但是git commit -m ‘我是备注信息’ 都会提示你没有配置过，如果没有配置过，是无法正常提交代码，报错信息类似：Please tell me who you are<br>–&gt;git config user.name xxx<br>–&gt;git config user.email <a href="mailto:xxx@qq.com" target="_blank" rel="noopener">xxx@qq.com</a><br>    –&gt;可以通过–global选项实现在本机一次配置多次使用</p>
<ul>
<li>ps：或则可以使用SSH来实现，这样也很方便</li>
<li>ps：也可以使用图形化界面 sourceTree，对小白极其友好 (非要説的話當然還是命令行可愛(●’◡’●))</li>
</ul>
<h3 id="git-push-服务器仓库的地址-https-master-–-gt-将本地主仓库中的代码上传到服务器中"><a href="#git-push-服务器仓库的地址-https-master-–-gt-将本地主仓库中的代码上传到服务器中" class="headerlink" title="git push 服务器仓库的地址(https) master   –&gt;将本地主仓库中的代码上传到服务器中"></a>git push 服务器仓库的地址(https) master   –&gt;将本地主仓库中的代码上传到服务器中</h3><p>git pull 服务器仓库地址 master –&gt;将服务器代码更新到本地(关联)</p>
<p>说明：<br>a、只有文件夹中有.git文件夹，仓库就一直有效，–&gt;一旦把.git文件夹删除，那么仓库就废了<br>b、git会忽略是所有的空文件夹<br>c、git管理的文件，不要轻易重命名文件<br>    –&gt;1.txt–&gt;2.txt这样的重命名操作将会被识别为：删除了1.txt，创建了2.txt</p>
<h2 id="输入github用户名和密码，如果看到：Authentication-failed，一定表示用户名和密码输入错误"><a href="#输入github用户名和密码，如果看到：Authentication-failed，一定表示用户名和密码输入错误" class="headerlink" title="输入github用户名和密码，如果看到：Authentication failed，一定表示用户名和密码输入错误"></a>输入github用户名和密码，如果看到：Authentication failed，一定表示用户名和密码输入错误</h2><h2 id="2个场景："><a href="#2个场景：" class="headerlink" title="2个场景："></a>2个场景：</h2><h3 id="服务器仓库是空仓库"><a href="#服务器仓库是空仓库" class="headerlink" title="服务器仓库是空仓库"></a>服务器仓库是空仓库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">touch 1.txt</span><br><span class="line">git add 1.txt</span><br><span class="line">git commit -m 提交了1.txt</span><br><span class="line">git push 服务器仓库地址 master</span><br></pre></td></tr></table></figure>

<h3 id="服务器仓库是非空仓库"><a href="#服务器仓库是非空仓库" class="headerlink" title="服务器仓库是非空仓库"></a>服务器仓库是非空仓库</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone 服务器仓库地址</span><br><span class="line">cd 文件夹</span><br><span class="line">git add 2.txt</span><br><span class="line">git commit -m 创建了2.txt</span><br><span class="line">git push 服务器仓库地址 master</span><br></pre></td></tr></table></figure>

<h3 id="基本够用-不够的话看-Git远程操作详解"><a href="#基本够用-不够的话看-Git远程操作详解" class="headerlink" title="基本够用 不够的话看 Git远程操作详解"></a>基本够用 不够的话看 <a href="http://www.ruanyifeng.com/blog/2014/06/git_remote.html" target="_blank" rel="noopener">Git远程操作详解</a></h3>]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>someday</title>
    <url>/2019/10/10/someday/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* 驴与绿鲤鱼与鱼</span><br><span class="line">* 乱文假数</span><br><span class="line">* 扁担没有板凳宽</span><br><span class="line">* 乱文假数</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>杂谈随笔</category>
      </categories>
      <tags>
        <tag>TED thoughts</tag>
      </tags>
  </entry>
  <entry>
    <title>我的博客</title>
    <url>/2019/09/28/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<ul>
<li>常用markdown 语法规则</li>
<li></li>
<li>常用markdown 语法规则</li>
<li></li>
<li>常用markdown 语法规则</li>
<li></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure>

 <!-- who you could be  做最好的自己
   信念坚定勇敢去实现 
   人生苦短 只走一遭 做些有意思的事情 
   什么对你来说是不可或缺的 最有价值的 
   就是尽可能的培养自己的品质  坚强的品格 追求卓越的习惯 -->]]></content>
      <categories>
        <category>杂谈随笔</category>
      </categories>
      <tags>
        <tag>TED thoughts</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/09/28/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
